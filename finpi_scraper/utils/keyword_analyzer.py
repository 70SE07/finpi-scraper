#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
"""

import json
import os
from datetime import datetime

def load_keywords(keywords_file):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞.
    """
    if not os.path.exists(keywords_file):
        print(f"‚ùå –§–∞–π–ª {keywords_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    
    with open(keywords_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_keywords(keywords_file, data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ñ–∞–π–ª.
    """
    with open(keywords_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def merge_keywords(existing_keywords, new_keywords, category_name):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
    """
    if category_name not in existing_keywords:
        existing_keywords[category_name] = {
            'keywords': [],
            'confidence': 0.5,
            'last_updated': datetime.now().strftime('%Y-%m-%d')
        }
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    existing_set = set(existing_keywords[category_name]['keywords'])
    new_set = set(new_keywords.keys())
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    new_keywords_list = list(new_set - existing_set)
    
    if new_keywords_list:
        existing_keywords[category_name]['keywords'].extend(new_keywords_list)
        existing_keywords[category_name]['last_updated'] = datetime.now().strftime('%Y-%m-%d')
        
        # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        existing_keywords[category_name]['confidence'] = min(
            existing_keywords[category_name]['confidence'] + 0.1, 1.0
        )
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_keywords_list)} –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è '{category_name}'")
        print(f"üî§ –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {new_keywords_list}")
    else:
        print(f"‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def analyze_keywords_effectiveness(keywords_file, other_file):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    """
    print("üìä –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í")
    print("="*50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords_data = load_keywords(keywords_file)
    
    if not keywords_data:
        print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ OTHER
    if not os.path.exists(other_file):
        print(f"‚ùå –§–∞–π–ª {other_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    with open(other_file, 'r', encoding='utf-8') as f:
        other_products = [line.strip() for line in f.readlines() if line.strip()]
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(other_products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ OTHER")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for category, data in keywords_data.items():
        if category == 'other_analysis':
            continue
            
        keywords = data['keywords']
        matched_products = []
        
        for product in other_products:
            product_lower = product.lower()
            for keyword in keywords:
                if keyword.lower() in product_lower:
                    matched_products.append(product)
                    break
        
        if matched_products:
            print(f"\nüéØ {category.upper()}:")
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matched_products)}")
            print(f"   üî§ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤: {matched_products[:3]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
    
    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üìÅ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ OTHER: {len(other_products)}")
    print(f"   üè∑Ô∏è –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(keywords_data)}")

def suggest_keyword_improvements(keywords_file):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    """
    print("\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í")
    print("="*50)
    
    keywords_data = load_keywords(keywords_file)
    
    for category, data in keywords_data.items():
        if category == 'other_analysis':
            continue
            
        keywords = data['keywords']
        confidence = data['confidence']
        
        print(f"\nüè∑Ô∏è {category.upper()}:")
        print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
        print(f"   üî§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")
        
        if confidence < 0.7:
            print(f"   ‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        if len(keywords) < 5:
            print(f"   ‚ö†Ô∏è –ú–∞–ª–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        if 'whisky' in category.lower():
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –¥–æ–±–∞–≤–∏—Ç—å '—Å–∫–æ—Ç—á', '–±—É—Ä–±–æ–Ω', '—Ç–µ–Ω–Ω–µ—Å—Å–∏'")
        elif 'vodka' in category.lower():
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –¥–æ–±–∞–≤–∏—Ç—å '–≤–æ–¥–æ—á–∫–∞', '–ø–µ—Ä–≤–∞–∫', '—Ö–æ—Ä—Ç–∏—Ü—è'")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
    """
    keywords_file = "keywords/alcohol_keywords.json"
    other_file = "output/GOODS/GROCERIES/BEVERAGES/rozetka_alcohol_other.txt"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    analyze_keywords_effectiveness(keywords_file, other_file)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    suggest_keyword_improvements(keywords_file)

if __name__ == "__main__":
    main()
