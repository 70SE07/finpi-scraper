#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –Ω–æ–º–µ—Ä–æ–≤
–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
"""
import os
import re
import glob

def clean_product_name(product_name):
    """
    –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö
    cleaned = re.sub(r'\([^)]*\)', '', product_name)
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'\s+', ' ', cleaned)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    cleaned = cleaned.strip()
    
    return cleaned

def clean_file(file_path):
    """
    –û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        cleaned_lines = []
        for line in lines:
            line = line.strip()
            if line:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                cleaned_line = clean_product_name(line)
                if cleaned_line:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    cleaned_lines.append(cleaned_line)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(file_path, 'w', encoding='utf-8') as f:
            for line in cleaned_lines:
                f.write(line + '\n')
        
        print(f"‚úÖ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª: {file_path}")
        print(f"   –ë—ã–ª–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        print(f"   –°—Ç–∞–ª–æ —Å—Ç—Ä–æ–∫: {len(cleaned_lines)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    print("üßπ –ù–ê–ß–ò–ù–ê–Æ –û–ß–ò–°–¢–ö–£ –¢–û–í–ê–†–û–í –û–¢ –ê–†–¢–ò–ö–£–õ–û–í")
    print("=" * 50)
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    output_dir = "output"
    pattern = os.path.join(output_dir, "**", "*.txt")
    files = glob.glob(pattern, recursive=True)
    
    if not files:
        print("‚ùå –§–∞–π–ª—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    success_count = 0
    for file_path in files:
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {file_path}")
        if clean_file(file_path):
            success_count += 1
    
    print(f"\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ñ–∞–π–ª–æ–≤")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(files) - success_count} —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()
